Hurst.todo       = rbind(Hurst.MOR,Hurst.NMOR)
Hurst.MOR.promedio$Etapa  = rep('REM',length(Hurst.MOR.promedio$Etapa))
Hurst.NMOR.promedio$Etapa = rep('NREM',length(Hurst.NMOR.promedio$Etapa))
Hurst.todo.promedio       = rbind(Hurst.MOR.promedio,Hurst.NMOR.promedio)
promedios.MOR$Etapa  = rep('REM',length(promedios.MOR$Grupo))
promedios.NMOR$Etapa = rep('NREM',length(promedios.NMOR$Grupo))
promedios.todo       = rbind(promedios.MOR,promedios.NMOR)
###############################################################################
# Hurst x Canal
# MOR
comparaciones     = matrix(0,nrow=n.canales,ncol=6)
comparaciones[,1] = kanales$Etiqueta
colnames(comparaciones) = c('Canal','p','dF','t','m1','m2')
for(ch in 1:n.canales){
ch.actual = kanales$Etiqueta[ch]
#Hurst.tmp = Hurst.MOR.promedio[grep(ch.actual,Hurst.MOR.promedio$Canal_var),]
Hurst.tmp = Hurst.MOR[grep(ch.actual,Hurst.MOR$Canal_var),]
a = Hurst.tmp[grep('CTRL',Hurst.tmp$Grupo),]
a = unlist(a$Hurst)
b = Hurst.tmp[grep('PMCI',Hurst.tmp$Grupo),]
b = unlist(b$Hurst)
k = t.test(a,b,na.action(na.omit))
comparaciones[ch,'p']  = k$p.value
comparaciones[ch,'dF'] = k$parameter
comparaciones[ch,'t']  = k$statistic
comparaciones[ch,'m1'] = k$estimate[1]
comparaciones[ch,'m2'] = k$estimate[2]
}
A = ggplot(promedios.MOR,aes(x=Canal_var,y=Hurst,fill=Grupo)) +
theme_classic2() +
labs(fill=NULL) +
xlab(NULL) + ylab('Hurst Exponent') +
geom_bar(stat='identity',position=position_dodge(),
color='black') +
geom_errorbar(aes(ymin=Hurst-se,ymax=Hurst+se),
position=position_dodge(.9),width=.5) +
coord_cartesian(ylim=c(.5,1.6))+
scale_fill_grey(start = 1, end = 0) +
stat_compare_means(data=Hurst.MOR.promedio,inherit.aes=F,
mapping=aes(x=Canal_var,y=Hurst,fill=Grupo),
label='p.signif',method='t.test',
hide.ns=T,label.y=1.6)+
theme(legend.position='top',legend.direction = 'horizontal',
legend.justification=c(1,0))+
rotate_x_text(angle = 45)
ggarrange(A,labels='AUTO')
ggsave(filename='/comparacion_multi_mor.png',path=dir_graf,
device='png',units='cm',width=8,height=4,dpi=400,scale=2)
# NMOR
comparaciones     = matrix(0,nrow=n.canales,ncol=6)
comparaciones[,1] = kanales$Etiqueta
colnames(comparaciones) = c('Canal','p','dF','t','m1','m2')
for(ch in 1:n.canales){
ch.actual = kanales$Etiqueta[ch]
#Hurst.tmp = Hurst.NMOR.promedio[grep(ch.actual,Hurst.NMOR.promedio$Canal_var),]
Hurst.tmp = Hurst.NMOR[grep(ch.actual,Hurst.NMOR$Canal_var),]
a = Hurst.tmp[grep('CTRL',Hurst.tmp$Grupo),]
a = unlist(a$Hurst)
b = Hurst.tmp[grep('PMCI',Hurst.tmp$Grupo),]
b = unlist(b$Hurst)
k = t.test(a,b,na.action(na.omit))
comparaciones[ch,'p']  = k$p.value
comparaciones[ch,'dF'] = k$parameter
comparaciones[ch,'t']  = k$statistic
comparaciones[ch,'m1'] = k$estimate[1]
comparaciones[ch,'m2'] = k$estimate[2]
}
A = ggplot(promedios.NMOR,aes(x=Canal_var,y=Hurst,fill=Grupo)) +
theme_classic2() +
labs(fill=NULL) +
xlab(NULL) + ylab('Hurst Exponent') +
geom_bar(stat='identity',position=position_dodge(),
color='black') +
geom_errorbar(aes(ymin=Hurst-se,ymax=Hurst+se),
position=position_dodge(.9),width=.5) +
coord_cartesian(ylim=c(.5,1.6))+
scale_fill_grey(start = 1, end = 0) +
stat_compare_means(data=Hurst.NMOR.promedio,inherit.aes=F,
mapping=aes(x=Canal_var,y=Hurst,fill=Grupo),
label='p.signif',method='t.test',
hide.ns=T,label.y=1.6)+
theme(legend.position='top',legend.direction = 'horizontal',
legend.justification=c(1,0))+
rotate_x_text(angle = 45)
ggarrange(A,labels='B')
ggsave(filename='/comparacion_multi_nmor.png',path=dir_graf,
device='png',units='cm',width=8,height=4,dpi=400,scale=2)
# ambos
comparaciones     = matrix(0,nrow=n.canales,ncol=6)
comparaciones[,1] = kanales$Etiqueta
colnames(comparaciones) = c('Canal','p','dF','t','m1','m2')
for(ch in 1:n.canales){
ch.actual = kanales$Etiqueta[ch]
Hurst.tmp = Hurst.todo.promedio[grep(ch.actual,Hurst.NMOR.promedio$Canal_var),]
a = Hurst.tmp[grep('CTRL',Hurst.tmp$Grupo),]
a = unlist(a$Hurst)
b = Hurst.tmp[grep('PMCI',Hurst.tmp$Grupo),]
b = unlist(b$Hurst)
k = t.test(a,b,na.action(na.omit))
comparaciones[ch,'p']  = k$p.value
comparaciones[ch,'dF'] = k$parameter
comparaciones[ch,'t']  = k$statistic
comparaciones[ch,'m1'] = k$estimate[1]
comparaciones[ch,'m2'] = k$estimate[2]
}
###############################################################################
# Intercanales
A = ggplot(promedios.todo,aes(x=Canal_var,y=Hurst,fill=Grupo)) +
theme_classic2() +
labs(fill=NULL) +
xlab(NULL) + ylab('Hurst Exponent') +
geom_bar(stat='identity',position=position_dodge(),
color='black') +
geom_errorbar(aes(ymin=Hurst-se,ymax=Hurst+se),
position=position_dodge(.9),width=.5) +
coord_cartesian(ylim=c(.5,1.6))+
scale_fill_grey(start = 1, end = 0) +
stat_compare_means(data=Hurst.todo.promedio,inherit.aes=F,
mapping=aes(x=Canal_var,y=Hurst,fill=Grupo),
label='p.signif',method='t.test',
hide.ns=T,label.y=1.6)+
theme(legend.position='top',legend.direction = 'horizontal',
legend.justification=c(1,0))+
facet_grid(Etapa~.) +
theme(strip.background = element_blank())+
rotate_x_text(angle = 45)
ggarrange(A,labels='A')
ggsave(filename='/comparacion_hurst_multi_CTRL_PMCI.png',path=dir_graf,
device='png',units='cm',width=8,height=6,dpi=400,scale=2)
# grafico nuevo, REM vs NREM
# usando los promedios
comparaciones.CTL     = matrix(0,nrow=n.canales,ncol=5)
comparaciones.CTL[,1] = kanales$Etiqueta
colnames(comparaciones.CTL) = c('Canal','p','dF','t','m')
# grafico nuevo, REM vs NREM
# usando los promedios
comparaciones.CTL     = matrix(0,nrow=n.canales,ncol=5)
comparaciones.CTL[,1] = kanales$Etiqueta
colnames(comparaciones.CTL) = c('Canal','p','dF','t','m')
for(ch in 1:n.canales){
ch.actual = kanales$Etiqueta[ch]
#Hurst.tmp = Hurst.todo.promedio[grep(ch.actual,
#                                     Hurst.todo.promedio$Canal_var),]
Hurst.tmp = Hurst.todo[grep(ch.actual,Hurst.todo$Canal_var),]
Hurst.tmp = Hurst.tmp[grep('CTRL',Hurst.tmp$Grupo),]
a = Hurst.tmp[grep('^REM',Hurst.tmp$Etapa),]
a = unlist(a$Hurst)
b = Hurst.tmp[grep('NREM',Hurst.tmp$Etapa),]
b = unlist(b$Hurst)
k = t.test(a,b,na.action(na.omit),paired = T)
comparaciones.CTL[ch,'p']  = k$p.value
comparaciones.CTL[ch,'dF'] = k$parameter
comparaciones.CTL[ch,'t']  = k$statistic
comparaciones.CTL[ch,'m'] = k$estimate[1]
}
# grafico nuevo, REM vs NREM
# usando los promedios
comparaciones.CTL     = matrix(0,nrow=n.canales,ncol=5)
comparaciones.CTL[,1] = kanales$Etiqueta
colnames(comparaciones.CTL) = c('Canal','p','dF','t','m')
for(ch in 1:n.canales){
ch.actual = kanales$Etiqueta[ch]
#Hurst.tmp = Hurst.todo.promedio[grep(ch.actual,
#                                     Hurst.todo.promedio$Canal_var),]
Hurst.tmp = Hurst.todo[grep(ch.actual,Hurst.todo$Canal_var),]
Hurst.tmp = Hurst.tmp[grep('CTRL',Hurst.tmp$Grupo),]
a = Hurst.tmp[grep('^REM',Hurst.tmp$Etapa),]
a = unlist(a$Hurst)
b = Hurst.tmp[grep('NREM',Hurst.tmp$Etapa),]
b = unlist(b$Hurst)
k = t.test(a,b,na.action(na.omit),paired = T)
comparaciones.CTL[ch,'p']  = k$p.value
comparaciones.CTL[ch,'dF'] = k$parameter
comparaciones.CTL[ch,'t']  = k$statistic
comparaciones.CTL[ch,'m'] = k$estimate[1]
}
comparaciones.PDC     = matrix(0,nrow=n.canales,ncol=5)
comparaciones.PDC[,1] = kanales$Etiqueta
colnames(comparaciones.PDC) = c('Canal','p','dF','t','m')
for(ch in 1:n.canales){
ch.actual = kanales$Etiqueta[ch]
#Hurst.tmp = Hurst.todo.promedio[grep(ch.actual,
#                                     Hurst.todo.promedio$Canal_var),]
Hurst.tmp = Hurst.todo[grep(ch.actual,Hurst.todo$Canal_var),]
Hurst.tmp = Hurst.tmp[grep('PMCI',Hurst.tmp$Grupo),]
a = Hurst.tmp[grep('^REM',Hurst.tmp$Etapa),]
a = unlist(a$Hurst)
b = Hurst.tmp[grep('NREM',Hurst.tmp$Etapa),]
b = unlist(b$Hurst)
k = t.test(a,b,na.action(na.omit),paired = T)
comparaciones.PDC[ch,'p']  = k$p.value
comparaciones.PDC[ch,'dF'] = k$parameter
comparaciones.PDC[ch,'t']  = k$statistic
comparaciones.PDC[ch,'m'] = k$estimate[1]
}
30597168/18365870
###############################################################################
# parametros
grabar         = FALSE
orden_stam     = TRUE
usar.log = F
# tamano de la ventana analizada, nombre raro para evitar confusiones
dur.chunk   = 30
zoom           = T
unidad_par_t   = 'tiempo'
#unidad_par_t   = 'epocas'
quienes  = 1:10
n.sujetos = length(quienes)
dir_gral    = 'C:/Users/EQUIPO 1/Desktop/julio/TESIS/articulo_dfa'
dir_info    = 'C:/Users/EQUIPO 1/Desktop/julio/TESIS/articulo_dfa'
dir_scripts = 'C:/Users/EQUIPO 1/Desktop/julio/TESIS/articulo_dfa/scripts'
dir_res_pre = 'C:/Users/EQUIPO 1/Desktop/julio/TESIS/articulo_dfa/stat'
dir_graf    = 'C:/Users/EQUIPO 1/Desktop/julio/TESIS/articulo_dfa/graf_def'
###############################################################################
# librerias
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk1.8.0_65')
require('readxl')
require('ggplot2')
require('ggpubr')
require('readr')
require('reshape')
require('Rmisc')
# sub-rutinas que acortan el codigo
source(paste0(dir_scripts,'/utileria.R'))
###############################################################################
# datos generales
info     = read_excel(paste0(dir_info,
'/info_tecnico2.xlsx'),sheet='General')
kanales  = read_excel(paste0(dir_info,'/info_canales.xlsx'))
if(orden_stam){
kanales  = read_excel(paste0(dir_info,'/info_canales_alterno.xlsx'))
}
n.canales = length(kanales$Etiqueta)
#################################################
# datos sobre estacionariedad
setwd(dir_res_pre)
raw  = read_excel(paste0(dir_res_pre,'/stat_whole_asdataframe.xlsx'),
sheet='mor')
raw = as.data.frame(raw)
RES.MOR  = melt(raw,id=c('Sujeto','Edad','Neuropsi','MMSE',
'Escolaridad','Grupo','Etapa'))
RES.MOR  = as.data.frame(RES.MOR)
colnames(RES.MOR)[c(8,9)] = c('Canal_var','Proporcion')
RES.MOR$Proporcion = RES.MOR$Proporcion*100
raw  = read_excel(paste0(dir_res_pre,'/stat_whole_asdataframe.xlsx'),
sheet='nmor')
raw = as.data.frame(raw)
RES.NMOR  = melt(raw,id=c('Sujeto','Edad','Neuropsi','MMSE',
'Escolaridad','Grupo','Etapa'))
RES.NMOR  = as.data.frame(RES.NMOR)
colnames(RES.NMOR)[c(8,9)] = c('Canal_var','Proporcion')
RES.NMOR$Proporcion = RES.NMOR$Proporcion*100
RES.MOR$Grupo  = factor(RES.MOR$Grupo,labels = c('CTRL','PMCI'))
RES.NMOR$Grupo = factor(RES.NMOR$Grupo,labels = c('CTRL','PMCI'))
promedios.MOR  = summarySE(RES.MOR,measurevar='Proporcion',
groupvars=c('Grupo','Canal_var'),na.rm=T)
promedios.NMOR = summarySE(RES.NMOR,measurevar='Proporcion',
groupvars=c('Grupo','Canal_var'),na.rm=T)
###############################################################################
# Intercanales
RES.MOR$Etapa  = rep('REM',length(RES.MOR$Etapa))
RES.NMOR$Etapa = rep('NREM',length(RES.MOR$Etapa))
RES.todo = rbind(RES.MOR,RES.NMOR)
promedios.MOR$Etapa  = rep('REM',length(promedios.MOR$Grupo))
promedios.NMOR$Etapa = rep('NREM',length(promedios.NMOR$Grupo))
promedios.todo = rbind(promedios.MOR,promedios.NMOR)
A = ggplot(promedios.todo,aes(x=Canal_var,y=Proporcion,fill=Grupo)) +
theme_classic2() +
labs(fill=NULL) +
xlab(NULL) + ylab('Stationary epochs [%]') +
geom_bar(stat='identity',position=position_dodge(),
color='black') +
geom_errorbar(aes(ymin=Proporcion-se,ymax=Proporcion+se),
position=position_dodge(.9),width=.5) +
coord_cartesian(ylim=c(0,50))+
#scale_fill_grey(start = 1, end = 0) +
scale_fill_manual(values = c('#e6e6e6ff','#4d4d4dff'))+
stat_compare_means(data=RES.todo,inherit.aes=F,
mapping=aes(x=Canal_var,y=Proporcion,fill=Grupo),
label='p.signif',method='wilcox.test',
hide.ns=T,label.y = 45)+
theme(legend.position='top',legend.direction = 'horizontal',
legend.justification=c(1,0))+
facet_grid(Etapa~.) +
theme(strip.background = element_blank())+
rotate_x_text(angle = 45)
ggarrange(A,labels=NULL)
View(promedios.todo)
View(RES.todo)
ch = 1
ch.actual = kanales$Etiqueta[ch]
print(ch.actual)
#tmp   = Hurst.todo.promedio[grep(ch.actual,Hurst.todo.promedio$Canal),]
tmp   = RES.todo[grep(ch.actual,RES.todo$Canal),]
tmp.m = promedios.todo[grep(ch.actual,promedios.todo$Canal),]
View(tmp)
View(tmp.m)
aov   = aov(Proporcion ~ (Grupo) + (Etapa) +(Grupo:Etapa),
data=tmp)
k = summary(aov)
k = k[[1]]
print(k)
p = ggplot(tmp.m,aes(x=Etapa,y=Hurst,linetype=Grupo))+
theme_classic2() +
labs(linetype=ch.actual)+
coord_cartesian(ylim=c(0.3,1.75))+
geom_line(aes(group=Grupo))+
geom_errorbar(aes(ymin=Hurst-se,ymax=Hurst+se),width=.1,
color='grey40') +
geom_point()
print(p)
p = ggplot(tmp.m,aes(x=Etapa,y=Proporcion,linetype=Grupo))+
theme_classic2() +
labs(linetype=ch.actual)+
coord_cartesian(ylim=c(0.3,1.75))+
geom_line(aes(group=Grupo))+
geom_errorbar(aes(ymin=Proporcion-se,ymax=Proporcion+se),width=.1,
color='grey40') +
geom_point()
print(p)
ggplot(tmp.m,aes(x=Etapa,y=Proporcion,linetype=Grupo))+
theme_classic2() +
labs(linetype=ch.actual)+
coord_cartesian(ylim=c(0.3,1.75))+
geom_line(aes(group=Grupo))+
geom_errorbar(aes(ymin=Proporcion-se,ymax=Proporcion+se),width=.1,
color='grey40') +
geom_point()
ggplot(tmp.m,aes(x=Etapa,y=Proporcion,linetype=Grupo))+
theme_classic2() +
labs(linetype=ch.actual)+
coord_cartesian(ylim=c(0.3,1.75))+
geom_line(aes(group=Grupo))+
geom_errorbar(aes(ymin=Proporcion-sd,ymax=Proporcion+sd),width=.1,
color='grey40') +
geom_point()
ggplot(tmp.m,aes(x=Etapa,y=Proporcion,linetype=Grupo))+
theme_classic2() +
labs(linetype=ch.actual)+
#coord_cartesian(ylim=c(0.3,1.75))+
geom_line(aes(group=Grupo))+
geom_errorbar(aes(ymin=Proporcion-sd,ymax=Proporcion+sd),width=.1,
color='grey40') +
geom_point()
################################################################################
for(ch in 1:n.canales){
ch.actual = kanales$Etiqueta[ch]
print(ch.actual)
#tmp   = Hurst.todo.promedio[grep(ch.actual,Hurst.todo.promedio$Canal),]
tmp   = RES.todo[grep(ch.actual,RES.todo$Canal),]
tmp.m = promedios.todo[grep(ch.actual,promedios.todo$Canal),]
aov   = aov(Proporcion ~ (Grupo) + (Etapa) +(Grupo:Etapa),
data=tmp)
k = summary(aov)
k = k[[1]]
print(k)
ggplot(tmp.m,aes(x=Etapa,y=Proporcion,linetype=Grupo))+
theme_classic2() +
labs(linetype=ch.actual)+
#coord_cartesian(ylim=c(0.3,1.75))+
geom_line(aes(group=Grupo))+
geom_errorbar(aes(ymin=Proporcion-sd,ymax=Proporcion+sd),width=.1,
color='grey40') +
geom_point()
#ggsave(path=dir_graf,device='png',units='cm',
#       width=8,height=4,dpi=400,scale=2,
#       file=paste0(ch.actual,'.png'))
qs  = summarySE(data=tmp,groupvars=c('Grupo','Etapa'),
measurevar='Hurst')
qs2 = unlist(t(qs))
qs2 = as.list((qs2))
qs2 = unlist(t(qs2))
big.summary = rbind(big.summary,qs2)
#View(k)
invisible(readline(prompt="Presion [enter] para continuar"))
}
################################################################################
for(ch in 1:n.canales){
ch.actual = kanales$Etiqueta[ch]
print(ch.actual)
#tmp   = Hurst.todo.promedio[grep(ch.actual,Hurst.todo.promedio$Canal),]
tmp   = RES.todo[grep(ch.actual,RES.todo$Canal),]
tmp.m = promedios.todo[grep(ch.actual,promedios.todo$Canal),]
aov   = aov(Proporcion ~ (Grupo) + (Etapa) +(Grupo:Etapa),
data=tmp)
k = summary(aov)
k = k[[1]]
print(k)
ggplot(tmp.m,aes(x=Etapa,y=Proporcion,linetype=Grupo))+
theme_classic2() +
labs(linetype=ch.actual)+
#coord_cartesian(ylim=c(0.3,1.75))+
geom_line(aes(group=Grupo))+
geom_errorbar(aes(ymin=Proporcion-sd,ymax=Proporcion+sd),width=.1,
color='grey40') +
geom_point()
#ggsave(path=dir_graf,device='png',units='cm',
#       width=8,height=4,dpi=400,scale=2,
#       file=paste0(ch.actual,'.png'))
#qs  = summarySE(data=tmp,groupvars=c('Grupo','Etapa'),
#                measurevar='Hurst')
#qs2 = unlist(t(qs))
#qs2 = as.list((qs2))
#qs2 = unlist(t(qs2))
#big.summary = rbind(big.summary,qs2)
#View(k)
invisible(readline(prompt="Presion [enter] para continuar"))
}
################################################################################
for(ch in 1:n.canales){
ch.actual = kanales$Etiqueta[ch]
print(ch.actual)
#tmp   = Hurst.todo.promedio[grep(ch.actual,Hurst.todo.promedio$Canal),]
tmp   = RES.todo[grep(ch.actual,RES.todo$Canal),]
tmp.m = promedios.todo[grep(ch.actual,promedios.todo$Canal),]
aov   = aov(Proporcion ~ (Grupo) + (Etapa) +(Grupo:Etapa),
data=tmp)
k = summary(aov)
k = k[[1]]
print(k)
p = ggplot(tmp.m,aes(x=Etapa,y=Proporcion,linetype=Grupo))+
theme_classic2() +
labs(linetype=ch.actual)+
#coord_cartesian(ylim=c(0.3,1.75))+
geom_line(aes(group=Grupo))+
geom_errorbar(aes(ymin=Proporcion-sd,ymax=Proporcion+sd),width=.1,
color='grey40') +
geom_point()
print(p)
ggsave(path=dir_graf,device='png',units='cm',
width=8,height=4,dpi=400,scale=2,
file=paste0(ch.actual,'.png'))
qs  = summarySE(data=tmp,groupvars=c('Grupo','Etapa'),
measurevar='Hurst')
qs2 = unlist(t(qs))
qs2 = as.list((qs2))
qs2 = unlist(t(qs2))
big.summary = rbind(big.summary,qs2)
View(k)
invisible(readline(prompt="Presion [enter] para continuar"))
}
################################################################################
big_summary= c()
for(ch in 1:n.canales){
ch.actual = kanales$Etiqueta[ch]
print(ch.actual)
#tmp   = Hurst.todo.promedio[grep(ch.actual,Hurst.todo.promedio$Canal),]
tmp   = RES.todo[grep(ch.actual,RES.todo$Canal),]
tmp.m = promedios.todo[grep(ch.actual,promedios.todo$Canal),]
aov   = aov(Proporcion ~ (Grupo) + (Etapa) +(Grupo:Etapa),
data=tmp)
k = summary(aov)
k = k[[1]]
print(k)
p = ggplot(tmp.m,aes(x=Etapa,y=Proporcion,linetype=Grupo))+
theme_classic2() +
labs(linetype=ch.actual)+
#coord_cartesian(ylim=c(0.3,1.75))+
geom_line(aes(group=Grupo))+
geom_errorbar(aes(ymin=Proporcion-sd,ymax=Proporcion+sd),width=.1,
color='grey40') +
geom_point()
print(p)
ggsave(path=dir_graf,device='png',units='cm',
width=8,height=4,dpi=400,scale=2,
file=paste0(ch.actual,'.png'))
qs  = summarySE(data=tmp,groupvars=c('Grupo','Etapa'),
measurevar='Proporcion')
qs2 = unlist(t(qs))
qs2 = as.list((qs2))
qs2 = unlist(t(qs2))
big.summary = rbind(big.summary,qs2)
View(k)
invisible(readline(prompt="Presion [enter] para continuar"))
}
################################################################################
big.summary= c()
for(ch in 1:n.canales){
ch.actual = kanales$Etiqueta[ch]
print(ch.actual)
#tmp   = Hurst.todo.promedio[grep(ch.actual,Hurst.todo.promedio$Canal),]
tmp   = RES.todo[grep(ch.actual,RES.todo$Canal),]
tmp.m = promedios.todo[grep(ch.actual,promedios.todo$Canal),]
aov   = aov(Proporcion ~ (Grupo) + (Etapa) +(Grupo:Etapa),
data=tmp)
k = summary(aov)
k = k[[1]]
print(k)
p = ggplot(tmp.m,aes(x=Etapa,y=Proporcion,linetype=Grupo))+
theme_classic2() +
labs(linetype=ch.actual)+
#coord_cartesian(ylim=c(0.3,1.75))+
geom_line(aes(group=Grupo))+
geom_errorbar(aes(ymin=Proporcion-sd,ymax=Proporcion+sd),width=.1,
color='grey40') +
geom_point()
print(p)
ggsave(path=dir_graf,device='png',units='cm',
width=8,height=4,dpi=400,scale=2,
file=paste0(ch.actual,'.png'))
qs  = summarySE(data=tmp,groupvars=c('Grupo','Etapa'),
measurevar='Proporcion')
qs2 = unlist(t(qs))
qs2 = as.list((qs2))
qs2 = unlist(t(qs2))
big.summary = rbind(big.summary,qs2)
View(k)
invisible(readline(prompt="Presion [enter] para continuar"))
}
View(big.summary)
source('C:/Users/EQUIPO 1/Desktop/julio/TESIS/articulo_dfa/scripts/graficar_estacionariedad_excel12.R')
View(big.summary)
