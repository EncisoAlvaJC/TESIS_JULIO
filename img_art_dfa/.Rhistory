stat_compare_means(label = 'p.signif',method='wilcox.test',
hide.ns = T,paired = F,
method.args = list(alternative = "greater"))+
#stat_compare_means(label = 'p.format',method='wilcox.test',
#                  hide.ns = T)+
rotate_x_text(angle = 45)
source('~/TESIS/TESIS/img_ejemplos/porcentajes14_meta_parche.R')
ggplot(matriz2,aes(x=Canal_var,y=100*Proporcion,fill=Etapa))+
geom_boxplot() +
xlab(NULL) + ylab('Épocas estacionarias [%]') +
theme_bw() +
#scale_y_continuous(labels=percent) +
#scale_fill_brewer(palette='Paired') +
scale_fill_manual(values=c('#40ff40','#808080'))+
#theme(legend.position='bottom') +
theme(legend.position = c(0.05,0.85)) +
labs(fill=NULL) +
#labs(title=paste('Época =',toString(dur_chunk),'s')) +
#facet_grid(Grupo~.) +
stat_compare_means(label = 'p.signif',method='wilcox.test',
hide.ns = T,paired = F,
method.args = list(alternative = "greater"))+
#stat_compare_means(label = 'p.format',method='wilcox.test',
#                  hide.ns = T)+
rotate_x_text(angle = 45)
#################################################
# parametros del script
porcent = T     # proporcion o tiempo
escala  = F     # se grafica entre 0 y 1
binario = T   # contraste acepta/rechaza estacionariedad
#################################################
# parametros del sujeto
frecuencia       = info$Fr_muestreo[sujeto]
nombre_abreviado = info$Nombre[sujeto]
nombre           = info$Nombre_archivo[sujeto]
nom_dir          = info$Nombre_directorio[sujeto]
d_dir            = data_dir
#################################################
# carga las epocas
#ar_indice = read_excel(paste0(info_dir,'/info_tecnico.xlsx'),
#                       sheet='Epocas_todas')
ar_indice = read_excel(paste0(info_dir,'/info_tecnico.xlsx'),
sheet='EpocasTesis')
indice    = ar_indice[,nombre_abreviado]
indice    = as.numeric(unlist(indice))
indice    = indice[!is.na(indice)]
epo_s_min = 2
if(frecuencia==200){
indixe = ceiling(indice/3)
indixe = unique(indixe)
indixe = sort(indixe)
indice = indixe
}
factor.escala = 30/dur_chunk
if(factor.escala<1){
indixe = ceiling(indixe*factor.escala)
indixe = unique(indixe)
indixe = sort(indixe)
indice = indixe
}
if(factor.escala>1){
indixe = c()
for(k in 1:factor.escala){
indixe = c(indixe,indice*factor.escala-k+1)
}
indixe = unique(indixe)
indixe = sort(indixe)
indice = indixe
}
epo_s_min = 2*factor.escala
#################################################
# cargar los datos
RES_T    = c()
RES_TIR  = c()
max_epo  = rep(0,n.canales)
setwd(d_dir)
for(ch in 1:n.canales){
canal  = kanales$Nombre_archivo[ch]
#canal  = orden_k$Nombre_archivo[ch]
print(ch,canal)
ar_t   = paste0('EST_',nombre,'_',canal,'_T.txt'  )
pv_t   = scan(ar_t)
ar_tir = paste0('EST_',nombre,'_',canal,'_TIR.txt')
pv_tir = scan(ar_tir)
# datos en una matriz
RES_T   = do.call(rbind,list(RES_T  ,pv_t  ))
RES_TIR = do.call(rbind,list(RES_TIR,pv_tir))
max_epo[ch] = length(pv_t)
}
setwd(d_dir)
for(ch in 1:n.canales){
canal  = kanales$Nombre_archivo[ch]
#canal  = orden_k$Nombre_archivo[ch]
print(ch)
print(canal)
ar_t   = paste0('EST_',nombre,'_',canal,'_T.txt'  )
pv_t   = scan(ar_t)
ar_tir = paste0('EST_',nombre,'_',canal,'_TIR.txt')
pv_tir = scan(ar_tir)
# datos en una matriz
RES_T   = do.call(rbind,list(RES_T  ,pv_t  ))
RES_TIR = do.call(rbind,list(RES_TIR,pv_tir))
max_epo[ch] = length(pv_t)
}
#################################################
# variables auxiliares
IND_T = 1:min(max_epo)
n.epo = length(IND_T)
if(porcent){
tag = 'porcentaje'
}
if(!porcent){
tag = 'total'
}
mor   = indice
n.mor = setdiff(1:n.epo,mor)
#################################################
# proteccion contra NA
buen_t   = matrix(0,nrow=n.canales,ncol=3)
buen_tir = matrix(0,nrow=n.canales,ncol=3)
buen_ok  = matrix(0,nrow=n.canales,ncol=3)
for(ch in 1:n.canales){
buen_t[ch,1]   = length(RES_T[ch,]  )
buen_tir[ch,1] = length(RES_TIR[ch,])
buen_t[ch,2]   = length(n.mor)
buen_tir[ch,2] = length(n.mor)
buen_t[ch,3]   = length(  mor)
buen_tir[ch,3] = length(  mor)
for(jj in mor){
if(is.na(RES_T[ch,jj])){
buen_t[ch,2] = buen_t[ch,2] - 1
}
if(is.na(RES_TIR[ch,jj])){
buen_tir[ch,2]   = buen_tir[ch,2] - 1
}
}
for(jj in n.mor){
if(is.na(RES_T[ch,jj])){
buen_t[ch,3] = buen_t[ch,3] - 1
}
if(is.na(RES_TIR[ch,jj])){
buen_tir[ch,3]   = buen_tir[ch,3] - 1
}
}
for(jj in 1:length(RES_T[1,])){
if(is.na(RES_T[ch,jj])){
RES_T[ch,jj] = 0
#buen_t[ch,1] = buen_t[ch,1] - 1
}
}
for(jj in 1:length(RES_TIR[1,])){
if(is.na(RES_TIR[ch,jj])){
RES_TIR[ch,jj] = 0
#buen_tir[ch,1]   = buen_tir[ch,1] - 1
}
}
}
buen_ok = pmin(buen_t,buen_tir)
buen_ok = pmax(buen_ok,rep(1,n.canales))
#################################################
# seleccion epocas MOR
# contenedores de resultado
res_tot  = rep(0,n.canales)
res_mor  = rep(0,n.canales)
res_nmor = rep(0,n.canales)
significados = rep(0,n.canales)
# conteo y comparacion
for(ch in 1:n.canales){
res_tot[ch]  = sum(pmax((RES_T[ch,]  >p.val)*1,
(RES_TIR[ch,]>p.val)*1))
res_nmor[ch] = sum(pmax((RES_T[ch,n.mor]  >p.val)*1,
(RES_TIR[ch,n.mor]>p.val)*1))
res_mor[ch]  = sum(pmax((RES_T[ch,mor]  >p.val)*1,
(RES_TIR[ch,mor]>p.val)*1))
tu = prop.test(x=c(res_nmor[ch],res_mor[ch]),
n=c(length(RES_T[ch,]),length(mor)),
correct=T)
significados[ch] = as.numeric(tu['p.value'])
if(is.nan(significados[ch])){
significados[ch] = 1
}
}
if(porcent){
res_tot  =   res_tot/buen_ok[,1]
res_nmor =  res_nmor/buen_ok[,2]
res_mor  =   res_mor/buen_ok[,3]
}
# matriz con todos los datos
#ress = t(rbind(res_tot,res_nmor,res_mor,1:n.canales))
#colnames(ress) = c('Total','NMOR','MOR','Canal_var')
ress           = t(rbind(res_nmor,res_mor,1:n.canales))
colnames(ress) = c('NMOR','MOR','Canal_var')
ress           = as.data.frame(ress)
ress$Canal_var = factor(ress$Canal_var,labels=kanales$Etiqueta)
ress2           = melt(ress,id='Canal_var')
colnames(ress2) = c('Canal_var','Etapa','Porcentaje')
View(ress2)
View(ress)
# matriz con todos los datos
#ress = t(rbind(res_tot,res_nmor,res_mor,1:n.canales))
#colnames(ress) = c('Total','NMOR','MOR','Canal_var')
ress           = t(rbind(res_nmor,res_mor,1:n.canales))
colnames(ress) = c('NMOR','MOR','Canal_var')
ress           = as.data.frame(ress)
ress$Canal_var = factor(ress$Canal_var,labels=kanales$Etiqueta)
ress2           = melt(ress,id='Canal_var')
colnames(ress2) = c('Canal_var','Etapa','Porcentaje')
#################################################
# inicia grafico
if(graf.indv){
#################################################
# graficacion per se
p = ggplot(ress2,aes(x=Canal_var,y=Porcentaje*100,group=Etapa,
linetype=Etapa,shape=Etapa,colour=Etapa))+
theme_pubclean() +
scale_colour_manual(values=c('black','green4')) +
ylab('Épocas estacionarias [%]') +
xlab(NULL)+
labs(title=paste0('Participante : ',nombre_abreviado)) +
rotate_x_text(angle = 45) +
stat_compare_means(label='p.signif',method='wilcox.test',
hide.ns=T)+
geom_point() +
geom_line()
print(p)
if(grabar.indv){
setwd(g_dir)
ggsave(filename=paste0(nombre_abreviado,'_',tag,'.pdf'),
width=10.3/1.5,height=8/1.5,device='pdf')
}
}
#################################################
# asteriscos de significancia
suma = rep(0,n.canales)
for(i in 1:length(p.ast)){
suma = suma + 1*(significados<p.ast[i])
}
ress = t(rbind(res_tot,res_nmor,res_mor,1:n.canales))
ress           = as.data.frame(ress)
rownames(ress) = kanales$Etiqueta
colnames(ress) = c('Total','NMOR','MOR','Canal_var')
ress$Canal_var = factor(ress$Canal_var,labels=kanales$Etiqueta)
source('~/TESIS/TESIS/img_ejemplos/porcentajes14_meta_parche.R')
ggplot(matriz2,aes(x=Canal_var,y=100*Proporcion,fill=Etapa))+
geom_boxplot() +
xlab(NULL) + ylab('Épocas estacionarias [%]') +
theme_bw() +
#scale_y_continuous(labels=percent) +
#scale_fill_brewer(palette='Paired') +
scale_fill_manual(values=c('#40ff40','#808080'))+
#theme(legend.position='bottom') +
theme(legend.position = c(0.05,0.82)) +
labs(fill=NULL) +
#labs(title=paste('Época =',toString(dur_chunk),'s')) +
#facet_grid(Grupo~.) +
stat_compare_means(label = 'p.signif',method='wilcox.test',
hide.ns = T,paired = F,
method.args = list(alternative = "greater"))+
#stat_compare_means(label = 'p.format',method='wilcox.test',
#                  hide.ns = T)+
rotate_x_text(angle = 45)
#################################################
# directorios de trabajo
data_dir    = '~/TESIS/graf_datos/estacionariedad_sinfiltro/'
central_dir = '~/TESIS/TESIS/img_ejemplos'
e_dir       = '~/TESIS/graf_datos/epocas3/'
r_dir       = central_dir
#################################################
# parametros del script
p.val  = 0.05
p.ast  = c(.05,.01,.005)
grabar.gral = F
graf.indv   = T
grabar.indv = F
grabar.ast  = T
#################################################
# constantes generales
channel   = c('C3','C4','CZ',
'F3','F4','F7','F8',
'FP1','FP2','FZ',
'O1','O2','P3','P4','PZ',
'T3','T4','T5','T6',
'LOG','ROG',
'EMG')
nomb_dir  = c('VCNNS',
'MJNNVIGILOScCanal',
'JANASUE_revisado',
'GH',
'GURM_revisado',
'CLMN10SUE',
'RLMN',
'RRMNS_2',
'JGMN6SUE',
'FGH_EEGdescompuesto',
'MGNA',
'EMNN')
nomb_arch = c('VCNNS1',
'MJNNVIGILOS',
'JANASUE',
'GH24031950SUEÑO',
'GURM251148SUE',
'CLMN10SUE',
'RLMN10SUE',
'RRMNS',
'JGMN6SUE',
'FGHSUE',
'MGNA5SUE',
'EMNNS')
nomb_facil = c('VCR',
'MJH',
'JAE',
'GHA',
'MFGR',
'CLO',
'RLO',
'RRU',
'JGZ',
'FGH',
'MGG',
'EMT')
frecuenciasss = c(200,
512,512,
200,200,
512,512,
200,
512,512,
512,512)
grupo_de = c(0,0,0,0,0,1,1,1,1,-1,-1,-1)
#################################################
# para grabar datos en excel
require(xlsx)
#################################################
# parametros de apoyo
n.canales = length(channel)
ast       = c(' ','*','**','***')
#################################################
# contenedores de datos
dif_significativas            = matrix(nrow=22,ncol=12)
colnames(dif_significativas)  = nomb_facil
row.names(dif_significativas) = channel
matriz_mor  = matrix(nrow=12,ncol=22)
matriz_nmor = matrix(nrow=12,ncol=22)
matriz_tot  = matrix(nrow=12,ncol=22)
colnames(matriz_mor)  = channel
row.names(matriz_mor) = nomb_facil
#################################################
# cargar los datos
for(sujeto in 1:12){
setwd(central_dir)
source('~/TESIS/TESIS/img_ejemplos/porcentajes13_PDC.R')
}
#################################################
# separacion de grupos para comparar
m_mor_NN  =  matriz_mor[(grupo_de==0),]
m_mor_MN  =  matriz_mor[(grupo_de==1),]
m_nmor_NN = matriz_nmor[(grupo_de==0),]
m_nmor_MN = matriz_nmor[(grupo_de==1),]
m_tot_NN  =  matriz_tot[(grupo_de==0),]
m_tot_MN  =  matriz_tot[(grupo_de==1),]
codigo_NN = nomb_facil[(grupo_de==0)]
codigo_MN = nomb_facil[(grupo_de==1)]
n_NN = sum((grupo_de==0)*1)
n_MN = sum((grupo_de==1)*1)
#################################################
# parametros graficos
rojito    = rgb(255, 64, 64,maxColorValue=255)
verdecito = rgb( 64,255, 64,maxColorValue=255)
azulito   = rgb( 64, 64,255,maxColorValue=255)
gricesito = rgb(128,128,128,maxColorValue=255)
#len = 2
p.val = 0.05
grabar = T
# constantes genericas
channel   = c('C3','C4','CZ',
'F3','F4','F7','F8',
'FP1','FP2','FZ',
'O1','O2','P3','P4','PZ',
'T3','T4','T5','T6',
'LOG','ROG',
'EMG'
)
nomb_dir  = c('VCNNS',
'MJNNVIGILOScCanal',
'JANASUE_revisado',
'GH',
'GURM_revisado',
'CLMN10SUE',
'RLMN',
'RRMNS_2',
'JGMN6SUE',
'FGH_EEGdescompuesto',
'MGNA',
'EMNN')
nomb_arch = c('VCNNS1',
'MJNNVIGILOS',
'JANASUE',
'GH24031950SUEÑO',
'GURM251148SUE',
'CLMN10SUE',
'RLMN10SUE',
'RRMNS',
'JGMN6SUE',
'FGHSUE',
'MGNA5SUE',
'EMNNS')
nomb_facil = c('VCR',
'MJH',
'JAE',
'GHA',
'MFGR',
'CLO',
'RLO',
'RRU',
'JGZ',
'FGH',
'MGG',
'EMT')
grupo_de = c(0,0,0,0,0,1,1,1,1,-1,-1,-1)
dif_significativas = matrix(nrow=22,ncol=12)
colnames(dif_significativas) = nomb_facil
row.names(dif_significativas) = channel
matriz_mor  = matrix(nrow=12,ncol=22)
matriz_nmor = matrix(nrow=12,ncol=22)
matriz_tot  = matrix(nrow=12,ncol=22)
ast = c(' ','*','**','***')
colnames(matriz_mor)=channel
row.names(matriz_mor) = nomb_facil
central_dir = '/home/julio/Tesis/trabajo/scripts170620'
save_dir    = '/home/julio/Tesis/trabajo/scripts170620/poster_170718'
setwd(central_dir)
central_dir
central_dir = '~/TESIS/TESIS/img_ejemplos'
setwd(central_dir)
for(sujeto in 1:12){
setwd(central_dir)
if(grupo_de[sujeto]!=-1){
graficar = T
}else{
graficar=F
}
grabar=F
source('porcentajes12_PDC.R')
}
install.packages("plotrix")
for(sujeto in 1:12){
setwd(central_dir)
if(grupo_de[sujeto]!=-1){
graficar = T
}else{
graficar=F
}
grabar=F
source('porcentajes12_PDC.R')
}
e_dir
e_dir       = '~/TESIS/graf_datos/epocas3/'
for(sujeto in 1:12){
setwd(central_dir)
if(grupo_de[sujeto]!=-1){
graficar = T
}else{
graficar=F
}
grabar=F
source('porcentajes12_PDC.R')
}
central_dir
#################################################
# directorios de trabajo
data_dir    = '~/TESIS/graf_datos/estacionariedad_sinfiltro/'
central_dir = '~/TESIS/TESIS/img_ejemplos'
e_dir       = '~/TESIS/graf_datos/epocas3/'
for(sujeto in 1:12){
setwd(central_dir)
if(grupo_de[sujeto]!=-1){
graficar = T
}else{
graficar=F
}
grabar=F
source('porcentajes12_PDC.R')
}
e_dir
###############################################################################
# carpeta central
data_dir    = '~/TESIS/graf_datos/estacionariedad_filtro/'
central_dir = '~/TESIS/TESIS/img_art_dfa'
info_dir    = '~/TESIS/TESIS/articulo_dfa'
g_dir       = '~/TESIS/TESIS/img_art_dfa'
#################################################
# cargar los datos
for(sujeto in 1:12){
setwd(central_dir)
source('~/TESIS/TESIS/img_ejemplos/porcentajes13_PDC.R')
}
e_dir
###############################################################################
# carpeta central
data_dir    = '~/TESIS/graf_datos/estacionariedad_filtro/'
central_dir = '~/TESIS/TESIS/img_art_dfa'
info_dir    = '~/TESIS/TESIS/articulo_dfa'
g_dir       = '~/TESIS/TESIS/img_art_dfa'
for(sujeto in 1:12){
setwd(central_dir)
if(grupo_de[sujeto]!=-1){
graficar = T
}else{
graficar=F
}
grabar=F
source('porcentajes12_PDC.R')
}
